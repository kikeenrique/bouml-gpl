class UmlArtifact
!!!195458.cpp!!!	write(inout out : FileOut) : void
  const char * k = (_uml_20) ? "ownedMember" : "packagedElement";

  out.indent(); 
  out << "<" << k << " xmi:type=\"uml:Artifact\"";
  out.id(this); 
  out << " name=\"";
  out.quote(name());
  out << "\">\n"; 
  out.indent(+1); 
  
  write_description_properties(out); 
 
  const QVector<UmlItem> ch = children(); 
  unsigned i;
  unsigned n = ch.size(); 
     
  for (i = 0; i != n; i += 1) {
    UmlItem * x = ch[i];
    
    if ((x->kind() == aNcRelation) &&
	(x->stereotype() == "manifest") &&
	(((UmlNcRelation *) x)->relationKind() == aDependency))
      write_manifest(out, ((UmlNcRelation *) x)->target(), "dependency");
    else
      ch[i]->write(out); 
  }

  if (stereotype() == "source") {
    const QVector<UmlClass> & cls = associatedClasses();
    
    n = cls.size();
    
    for (i = 0; i != n; i += 1)
      write_manifest(out, cls[i], "source");
  }
  else {
    const QVector<UmlArtifact> & arts = associatedArtifacts();
    
    n = arts.size();
    
    for (i = 0; i != n; i += 1)
      write_manifest(out, arts[i], 0);
  }
 
  out.indent(-1); 
  out.indent(); 
  out << "</" << k << ">\n"; 

  unload(); 

!!!222722.cpp!!!	write_manifest(inout out : FileOut, in x : UmlItem, in name : str) : void
  static UmlItem * rank = 0;
  
  out.indent();
  out << "<manifestation xmi:type=\"uml:Manifestation\"";
  out.id_prefix(++rank, "Manifestation_");
  out.ref(this, "client");
  out.ref(x, "supplier");
  out.ref(x, "utilizedElement");
  if (name != 0)
    out << " name=\"" << name << '"';
  out << "/>\n";
