class UmlAttribute
!!!128352.cpp!!!	sKind() : string
  return "attribute";
!!!128352.java!!!	sKind() : string
  return "attribute";
!!!129907.cpp!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Attribut <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  fw.write("<p>Declaration :</p><ul>");
  
  QCString s = cppDecl();

  if (!s.isEmpty()) {
    fw.write("<li>C++ : ");
    gen_cpp_decl(s, FALSE);
    fw.write("</li>");
  }

  s = javaDecl();

  if (!s.isEmpty()) {
    fw.write("<li>Java : ");
    gen_java_decl(s);
    fw.write("</li>");
  }

  fw.write("</ul>");
  
  annotation();
 
  s = description();
  
  if (!s.isEmpty()) {
    fw.write("<p>");
    gen_cpp_decl(s, TRUE);
    fw.write("<br /></p>");
  }

  unload(FALSE, FALSE);
!!!129907.java!!!	html(in pfix : string, in rank : uint, in level : uint) : void
  define();

  fw.write("<table><tr><td><div class=\"element\">Attribut <b>");
  writeq(name());
  fw.write("</b></div></td></tr></table>\n");

  fw.write("<p>Declaration :</p><ul>");
  
  String s = cppDecl();

  if (s.length() != 0) {
    fw.write("<li>C++ : ");
    gen_cpp_decl(s, false);
    fw.write("</li>");
  }

  s = javaDecl();

  if (s.length() != 0) {
    fw.write("<li>Java : ");
    gen_java_decl(s);
    fw.write("</li>");
  }

  fw.write("</ul>");
  
  annotation();
 
  s = description();
  
  if (s.length() != 0) {
    fw.write("<p>");
    gen_cpp_decl(s, true);
    fw.write("<br /></p>");
  }

  unload(false, false);
!!!130035.cpp!!!	gen_cpp_decl(in s : string, in descr : bool) : void
  const char * p;
  
  if (! descr) {
    write((cppVisibility() == DefaultVisibility)
	  ? visibility() : cppVisibility(),
	  TRUE);
    fw.write(": ");
    p = bypass_comment(s);
  }
  else
    p = s;
  
  for (;;) {
    switch (*p) {
    case 0:
      return;
    case '$':
      if (!strncmp(p, "${comment}", 10))
	p += 10;
      else if (!strncmp(p, "${description}", 14))
	p += 14;
      else if (!strncmp(p, "${name}", 7)) {
	p += 7;
	writeq(name());
      }
      else if (!strncmp(p, "${value}", 8) || !strncmp(p, "${h_value}", 10))
	return;
      else if (!strncmp(p, "${static}", 9)) {
	p += 9;
	if (isClassMember())
	  fw.write("static ");
      }
      else if (!strncmp(p, "${const}", 8)) {
	p += 8;
	if (isReadOnly())
	  fw.write("const ");
      }
      else if (!strncmp(p, "${mutable}", 10)) {
	p += 10;
	if (isCppMutable())
	  fw.write("mutable ");
      }
      else if (!strncmp(p, "${volatile}", 11)) {
	p += 11;
	if (isVolatile())
	  fw.write("volatile ");
      }
      else if (!strncmp(p, "${type}", 7)) {
	p += 7;
	write(type(), TRUE);
      }
      else
	fw.write(*p++);
      break;
    case '\r':
      p += 1;
      break;
    case '\n':
      if (descr) {
	fw.write("<br />");
	p += 1;
      }
      else {
	fw.write(' ');
	
	do
	  p += 1;
	while ((*p != 0) && (*p <= ' '));
      }
      break;
    case ';':
      return;
    case '@':
      manage_alias(p);
      break;
    default:
      writeq(*p++);
    }
  }
!!!130035.java!!!	gen_cpp_decl(in s : string, in descr : bool) : void
  int n = s.length();
  int index;

  if (! descr) {
    write((cppVisibility() == aVisibility.DefaultVisibility)
	  ? visibility() : cppVisibility(),
	  true);
    fw.write(": ");
    index = bypass_comment(s);
  }
  else
    index = 0;
  
  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      writeq(name());
    }
    else if (s.startsWith("${value}", index) ||
	     s.startsWith("${h_value}", index))
      break;
    else if (s.startsWith("${static}", index)) {
      index += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (s.startsWith("${const}", index)) {
      index += 8;
      if (isReadOnly())
	fw.write("const ");
    }
    else if (s.startsWith("${mutable}", index)) {
      index += 10;
      if (isCppMutable())
	fw.write("mutable ");
    }
    else if (s.startsWith("${volatile}", index)) {
      index += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), true);
    }
    else if (s.charAt(index) == '\r')
      index += 1;
    else if (s.charAt(index) == '\n') {
      if (descr) {
	fw.write("<br />");
	index += 1;
      }
      else {
	fw.write(' ');
	
	do
	  index += 1;
	while ((index != n) && Character.isWhitespace(s.charAt(index)));
      }
    }
    else if (s.charAt(index) == ';')
      break;
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else
      writeq(s.charAt(index++));
  }
!!!130163.cpp!!!	gen_java_decl(in s : string) : void
  const char * p = bypass_comment(s);

  while (*p) {
    if (!strncmp(p, "${comment}", 10))
      p += 10;
    else if (!strncmp(p, "${description}", 14))
      p += 14;
    else if (!strncmp(p, "${name}", 7)) {
      p += 7;
      writeq(name());
    }
    else if (!strncmp(p, "${value}", 8)) {
      p += 8;
    }
    else if (!strncmp(p, "${class}", 8)) {
      p += 8;
      writeq(parent()->name());
    }
    else if (!strncmp(p, "${visibility}", 13)) {
      p += 13;
      write(visibility(), FALSE);
      fw.write(' ');
    }
    else if (!strncmp(p, "${static}", 9)) {
      p += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (!strncmp(p, "${transient}", 12)) {
      p += 12;
      if (isJavaTransient())
	fw.write("transient ");
    }
    else if (!strncmp(p, "${volatile}", 11)) {
      p += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (!strncmp(p, "${final}", 8)) {
      p += 8;
      if (isReadOnly())
	fw.write("final ");
    }
    else if (!strncmp(p, "${type}", 7)) {
      p += 7;
      write(type(), FALSE);
    }
    else if (!strncmp(p, "${@}", 4))
      p += 4;
    else if ((*p == '\n') || (*p == '\r')) {
      fw.write(' ');

      do
	p += 1;
      while ((*p != 0) && (*p <= ' '));
    }
    else if ((*p == '{') || (*p == ';'))
      break;
    else if (*p == '@')
      manage_alias(p);
    else
      writeq(*p++);
  }
!!!130163.java!!!	gen_java_decl(in s : string) : void
  int n = s.length();
  int index = bypass_comment(s);

  while (index != n) {
    if (s.startsWith("${comment}", index))
      index += 10;
    else if (s.startsWith("${description}", index))
      index += 14;
    else if (s.startsWith("${name}", index)) {
      index += 7;
      writeq(name());
    }
    else if (s.startsWith("${value}", index)) {
      index += 8;
    }
    else if (s.startsWith("${class}", index)) {
      index += 8;
      writeq(parent().name());
    }
    else if (s.startsWith("${visibility}", index)) {
      index += 13;
      write(visibility(), false);
      fw.write(' ');
    }
    else if (s.startsWith("${static}", index)) {
      index += 9;
      if (isClassMember())
	fw.write("static ");
    }
    else if (s.startsWith("${transient}", index)) {
      index += 12;
      if (isJavaTransient())
	fw.write("transient ");
    }
    else if (s.startsWith("${volatile}", index)) {
      index += 11;
      if (isVolatile())
	fw.write("volatile ");
    }
    else if (s.startsWith("${final}", index)) {
      index += 8;
      if (isReadOnly())
	fw.write("final ");
    }
    else if (s.startsWith("${type}", index)) {
      index += 7;
      write(type(), false);
    }
    else if (s.startsWith("${@}", index)) {
      index += 4;
    }
    else if ((s.charAt(index) == '\n') || (s.charAt(index) == '\r')) {
      fw.write(' ');

      do
	index += 1;
      while ((index != n) && Character.isWhitespace(s.charAt(index)));
    }
    else if ((s.charAt(index) == '{') || (s.charAt(index) == ';'))
      break;
    else if (s.charAt(index) == '@')
      index = manage_alias(s, index);
    else
      writeq(s.charAt(index++));
  }
